 git config --global credential.helper wincred
 git config --global user.name "<John Doe>"
 git config --global user.email <johndoe@example.com>

//F1 on VS
>git:clone
https://Ningzen@dev.azure.com/Ningzen/eShopOnWeb/_git/eShopOnWeb

With the SOURCE CONTROL tab selected, at the top of the pane, in the textbox, type My commit as the commit message and press Ctrl+Enter to commit it locally.

>Git: Delete Branch
//This command will update the origin branches in the local snapshot and delete those that are no longer there.
>Git: Fetch (Prune)


//to restore branch from Ado
tab All in Branches, input name of branch in filter search. normally cannot see

//The repo .git\hooks folder isn't committed into source control. You may wonder how you share the goodness of the automated scripts you create with the team.
Git config --global core.hooksPath '~/.githooks'

//overwrite hooks
Git commit --no-verify

//scan local repo for keywords and throw

#!C:/Program\ Files/Git/usr/bin/sh.exe
matches=$(git diff-index --patch HEAD | grep '^+' | grep -Pi 'password|keyword2|keyword3')
if [ ! -z "$matches" ]
then
    cat <<\EOT
Error: Words from the blocked list were present in the diff:
EOT
    echo $matches
    exit 1
fi

//create service principal on azure cloud shell
subscriptionName=$(az account show --query name --output tsv)
subscriptionId=$(az account show --query id --output tsv)
echo $subscriptionName
echo $subscriptionId

az ad sp create-for-rbac --name sp-az400-azdo --role contributor --scopes /subscriptions/$subscriptionId
// The command will generate a JSON output. Copy the output to text file.

//to the Azure DevOps eShopOnWeb project. Click on Project Settings>Service Connections (under Pipelines) and New Service Connection.

https://dev.azure.com/Ningzen/eShopOnWeb/_git/eShopOnWeb?path=/.ado/eshoponweb-ci-docker.yml


### CI pipeline is completed
 

###now create CD pipeline

// add role assignment to allow Azure App Service pull the docker image from Azure Container Registry.

 spId=$(az ad sp list --display-name sp-az400-azdo --query "[].id" --output tsv)
 echo $spId
 roleName=$(az role definition list --name "User Access Administrator" --query [0].name --output tsv)
 echo $roleName
 
 //After getting the service principal ID and the role name, let’s create the role assignment by running this command (replace rg-az400-container-NAME with your resource group name)
 
 az role assignment create --assignee $spId --role $roleName --resource-group "rg-az400-container-NAME" 
 
 //New pipeline, Existing Azure Pipelines YAML File
 https://dev.azure.com/Ningzen/eShopOnWeb/_git/eShopOnWeb?path=/.ado/eshoponweb-cd-webapp-docker.yml

 
 //cleanup on azure
 
  //az group list --query "[?starts_with(name,'rg-az400-container-')].name" --output tsv
  az group list --query "[?starts_with(name,'rg-az400-container-')].[name]" --output tsv | xargs -L1 bash -c 'az group delete --name $0 --no-wait --yes'
 
//agent extract n config
https://microsoftlearning.github.io/AZ400-DesigningandImplementingMicrosoftDevOpsSolutions/Instructions/Labs/AZ400_M03_L04_Configuring_Agent_Pools_and_Understanding_Pipeline_Styles.html
https://learn.microsoft.com/en-us/azure/devops/pipelines/agents/v2-windows?view=azure-devops#check-prerequisites

 cd \
 mkdir agent ; cd agent
 $TARGET = Get-ChildItem "$Home\Downloads\vsts-agent-win-x64-*.zip"
 Add-Type -AssemblyName System.IO.Compression.FileSystem
 [System.IO.Compression.ZipFile]::ExtractToDirectory($TARGET, "$PWD")
 
  .\config.cmd

On the PartsUnlimited edit pane, in the existing YAML-based pipeline, 
replace line 
vmImage: windows-2019 

designating the target agent pool the following content, designating the newly created self-hosted agent pool:

 name: az400m05l05a-pool
 demands:
 - agent.name -equals az400m05-vm0
 
 //For Task: NugetToolInstaller@0, click on Settings (link that is displaying above the task in grey colour), 
 //modify Version of NuGet.exe to install > 4.0.0 and click on Add.

YAML Pipelines as Code don’t have Release/Quality Gates as we have with Azure DevOps Classic Release Pipelines. However, some similarities can be configured for YAML Pipelines-as-Code using Environments.

As the environment is a specific setting of a deployment stage, it cannot be used by “jobs”. Therefore, we have to make some additional changes to the current job definition.
On Line 60, rename “- job: Deploy” to - deployment: Deploy

//create the Azure Service Principal used by GitHub to deploy the desired resources
az ad sp create-for-rbac --name GH-Action-eshoponweb --role contributor --scopes /subscriptions/SUBSCRIPTION-ID/resourceGroups/RESOURCE-GROUP --sdk-auth


//create app service plan and deploy 2 webapp
 REGION='centralus'
 RESOURCEGROUPNAME='az400m04l09-RG'
 az group create -n $RESOURCEGROUPNAME -l $REGION
 
  SERVICEPLANNAME='az400m04l09-sp1'
 az appservice plan create -g $RESOURCEGROUPNAME -n $SERVICEPLANNAME --sku S1
 
  SUFFIX=$RANDOM$RANDOM
 az webapp create -g $RESOURCEGROUPNAME -p $SERVICEPLANNAME -n RGATES$SUFFIX-Canary
 az webapp create -g $RESOURCEGROUPNAME -p $SERVICEPLANNAME -n RGATES$SUFFIX-Prod
 
 //release dashboard api
 https://vsrm.dev.azure.com/<organization_name>/Creating%20a%20Release%20Dashboard/_apis/release/releases?api-version=6.0
 https://vsrm.dev.azure.com/<organization_name>/Creating%20a%20Release%20Dashboard/_apis/release/deployments?DeploymentStatus=failed&api-version=6.0
  
On the Configure section, choose Existing Azure Pipelines YAML file. Provide the following path /.ado/eshoponweb-cd-aci.yml and click on Continue.

In the YAML pipeline definition, customize:

YOUR-SUBSCRIPTION-ID with your Azure subscription id.
az400eshop-NAME replace NAME to make it globally unique.
YOUR-ACR.azurecr.io and ACR-USERNAME with your ACR login server (both need the ACR name, can be reviewed on the ACR>Access Keys).
AZ400-EWebShop-NAME with the resource group name defined before in the lab.
Click on Save and Run and wait for the pipeline to execute successfully.

Note: The deployment may take a few minutes to complete. The CD definition consists of the following tasks:

Resources : it is prepared to automatically trigger based on CI pipeline completion. It also download the repository for the bicep file.
Variables (for Deploy stage) connects to the variable group to consume the Azure Key Vault secret acr-secret
AzureResourceManagerTemplateDeployment deploys the Azure Container Instance (ACI) using bicep template and provides the ACR login parameters to allow ACI to download the previously created container image from Azure Container Registry (ACR).
